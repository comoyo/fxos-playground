_ = require("underscore")
React = require("react")
Ajax = require("./ajax")
config = require("../etc/config")
moment = require("moment")
Init = require("./init")

DailyContent = React.createClass {
  getInitialState: -> {ajax: new Ajax(), menuData: {}}
  getDataForTimestamp: (timestamp, callback) ->
    timestamp.lang("nb_NO") #We want norwegian time zone for Fornebu
    url = config.lunchUrlTemplate
      .replace "${year4digits}", timestamp.format("gggg")
      .replace "${week2digits}", timestamp.format("ww")
    @state.ajax.getJson(url)
      .then (data) =>
        dataForDay = _.find(data, (day) -> day.date == timestamp.format("DD-MM-YYYY"))
        callback {menuData: dataForDay}
      , (error) ->
        msg = "Error #{JSON.stringify(error)}"
        console.error msg
        callback {error: msg}
    .done()
  setupWithTimestamp: (timestamp) -> @getDataForTimestamp timestamp, @setDayData
  getResetState: ->
    newState = {}
    if @state.error
      newState.error = undefined
    if @state.isWaiting
      newState.isWaiting = false
    if @state.menuData
      newState.menuData = undefined
    newState
  setDayData: (data) ->
    newState = _.extend(@getResetState(), data)
    @setState newState
  renderContent: ->
    lang = @props.lang
    if _.any @state.menuData
      return @state.menuData.cantines.map (cantine) ->
        `(<CantineContent key={cantine.name} data={cantine} lang={lang} />)`
    if @state.isWaiting
      return `(<div className="waiting">{config.lang[lang].waitingForData}</div>)`
    if @state.error
      return `(<div className="dataUnavailable">{config.lang[lang].lunchDataUnavailable}</div>)`
  refresh: ->
    @setDayData {isWaiting: true}
    @setupWithTimestamp moment()
  onWakeup: -> @refresh()
  componentDidMount: -> @refresh()
  render: ->
    return `(
      <div ref="dailyRoot" className="dailyContainer fullHeight">
        <div className="dailyAllButFooter">
          <div className="dailyHeader">
            <div className="header element1">
            </div>
            <div className="header element2">LUNCH</div>
            <div className="header element3">TIME</div>
          </div>
          <div className="dailyContent">
            <h2>Menu du jour:</h2>
            {this.renderContent()}
          </div>
        </div>
        <div className="dailyFooter">Tor Arvid, Denis &amp; Hans Christian</div>
      </div>
    )`
}

CantineContent = React.createClass {
  render: ->
    props = @props
    return `(
      <div className="cantineContent">
        <div className="cantineHeader">
          <div className="cantineName">
            <div className={"cantineNameFlag flag" + props.data.name}></div>
            <div className={props.data.name + " nameContent"}>{props.data.name}</div>
          </div>
          <div className="cantineLocation"><span>{props.data.location}</span></div>
        </div>
        <div className="cantineLunch">
          <table>
            {props.data.meal.lunch.map(function(item) {
                return (
                  <tr key={item.type}>
                    <th>{config.lang[props.lang][item.type]}:</th>
                    <td>{item[props.lang]}</td>
                  </tr>)
              })
            }
          </table>
        </div>
      </div>
    )`
}

window.onload = ->
  init = new Init()
  container = document.getElementById 'dailyContainer'
  language = init.getLanguage navigator.language
  app = React.renderComponent `<DailyContent lang={language}/>`, container
  init.registerPageVisibility app.onWakeup

module.exports = DailyContent
