_ = require("underscore")
React = require("react")
Ajax = require("./ajax")
config = require("../etc/config")
moment = require("moment")
Init = require("./init")

LunchTime = React.createClass {
  getInitialState: -> {ajax: new Ajax()}
  getDataForTimestamp: (timestamp, callback) ->
    timestamp.lang("nb_NO") #We want norwegian time zone for Fornebu
    url = config.lunchUrlTemplate
      .replace "${year4digits}", timestamp.year()
      .replace "${week2digits}", timestamp.format("ww")
    @state.ajax.getJson(url)
      .then (data) =>
        dataForDay = _.find(data, (day) -> day.date == timestamp.format("DD-MM-YYYY"))
        callback dataForDay
      , (error) -> console.error "Error #{JSON.stringify(error)}"
    .done()
  setupWithTimestamp: (timestamp) -> @getDataForTimestamp timestamp, @renderForDayData
  onWakeup: -> @setupWithTimestamp moment()
  renderForDayData: (data) ->
    props = @props
    React.unmountComponentAtNode @refs.dailyContainer.getDOMNode()
    React.renderComponent(
      `<DailyContent data={data} lang={props.lang} stateChange={this.stateChange} />`
      , @refs.dailyContainer.getDOMNode())
  stateChange: (data) ->
    switch data.newState
      when "settings"
        console.log "Go to settings"
  componentDidMount: -> @setupWithTimestamp moment()
  render: -> `(
    <div ref="root" className="lunchtimeRoot fullHeight">
      <div id="slider" className="fullHeight">
        <div id="overflow" className="fullHeight">
          <div id="inner" className="fullHeight">
            <div ref="dailyContainer" className="fullHeight">
            </div>
            <div ref="settingsContainer">
            </div>
          </div>
        </div>
      </div>
    </div>
    )`
}

DailyContent = React.createClass {
  clickSettings: ->
    @props.stateChange {"newState": "settings"}
  getContent: ->
    props = @props
    if props.data
      return props.data.cantines.map (cantine) =>
        `(<CantineContent key={cantine.name} data={cantine} lang={props.lang} />)`
    return `(
      <div className="dataUnavailable">{config.lang[props.lang].lunchDataUnavailable}</div>)`
  render: ->
    return `(
      <div className="dailyContainer fullHeight">
        <div className="dailyAllButFooter">
          <div className="dailyHeader">
            <div className="header element1">
            </div>
            <div className="header element2">LUNCH</div>
            <div className="header element3">TIME</div>
          </div>
          <div className="dailyContent">
            <h2>Menu du jour:</h2>
            {this.getContent()}
          </div>
        </div>
        <div className="dailyFooter">Tor Arvid, Denis &amp; Hans Christian</div>
      </div>
    )`
}

CantineContent = React.createClass {
  render: ->
    props = @props
    return `(
      <div className="cantineContent">
        <div className="cantineHeader">
          <div className="cantineName">
            <div className={"cantineNameFlag flag" + props.data.name}></div>
            <div className={props.data.name + " nameContent"}>{props.data.name}</div>
          </div>
          <div className="cantineLocation"><span>{props.data.location}</span></div>
        </div>
        <div className="cantineLunch">
          <table>
            {props.data.meal.lunch.map(function(item) {
                return (
                  <tr key={item.type}>
                    <th>{config.lang[props.lang][item.type]}:</th>
                    <td>{item[props.lang]}</td>
                  </tr>)
              })
            }
          </table>
        </div>
      </div>
    )`
}

window.onload = ->
  init = new Init()
  container = document.getElementById 'lunchtimeContainer'
  language = init.getLanguage navigator.language
  app = React.renderComponent `<LunchTime lang={language}/>`, container
  init.registerPageVisibility app.onWakeup

module.exports = LunchTime
